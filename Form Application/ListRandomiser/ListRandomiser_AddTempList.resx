<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>